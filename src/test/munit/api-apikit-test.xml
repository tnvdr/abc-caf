<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <spring:beans>
        <spring:import resource="classpath:api.xml"/>
    </spring:beans>
    <munit:config mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
    <http:request-config name="HTTP_Request_Configuration" host="localhost" port="8081" basePath="/api" doc:name="HTTP Request Configuration"/>
    <munit:test name="post:/ordercoffe:api-config-201-application/json-FlowTest" description="Verifying functionality of [post:/ordercoffe:api-config-201-application/json]" ignore="true">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['JMS']"/>
                <mock:with-attribute whereValue="#[]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json"/>
        </mock:when>
        <http:request config-ref="HTTP_Request_Configuration" path="/ordercoffe" method="POST" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string"/>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(201))]" doc:name="assert that - http.status eq 201"/>
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/post_201_ordercoffe_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected"/>
    </munit:test>
    <munit:test name="api-apikit-test-post:/ordercoffe:api-configTest" description="Test" ignore="true">
        <mock:when messageProcessor=".*:.*" doc:name="Mock#['JMS']">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['JMS']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <munit:set payload="#[new getResources(sample_data/sample.json)]" doc:name="Set Message"/>
        <flow-ref name="post:/ordercoffe:api-config" doc:name="Flow-ref to post:/ordercoffe:api-config"/>
        <munit:assert-payload-equals message="invalid payload" expectedValue="#[payload]" doc:name="Assert Payload"/>
    </munit:test>
    <munit:test name="api-apikit-test-apiFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock#['JMS']2">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['JMS']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock#['Database']">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Database']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <munit:set payload="#[new getResources(sample_data/sample.json)]" doc:name="Set Message"/>
        <flow-ref name="apiFlow" doc:name="Flow-ref to apiFlow"/>
        <munit:assert-payload-equals message="invalid payload" expectedValue="#[payload]" doc:name="Assert Payload"/>
    </munit:test>
</mule>
